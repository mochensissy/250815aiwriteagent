/**
 * ÊñáÁ´†ÁºñËæëÂô®ÁªÑ‰ª∂
 * 
 * ‰∏ªË¶ÅÁöÑÊñáÁ´†ÁºñËæëÁïåÈù¢ÔºåÊîØÊåÅÂØåÊñáÊú¨ÁºñËæë„ÄÅÂàíËØçÂª∫ËÆÆ„ÄÅÂØπËØùÂºè‰øÆÊîπ
 * ÈõÜÊàê‰∫ÜÊô∫ËÉΩÁºñËæëÂ∑•ÂÖ∑Ê†èÂíåÂÆûÊó∂È¢ÑËßàÂäüËÉΩ
 */

import React, { useState, useRef, useEffect, useCallback } from 'react';
import { MessageCircle, Image, Download, Wand2, MoreHorizontal, Copy, Eye, Edit3, Send, X, Sparkles, Type, Scissors, Volume2, BookOpen, Zap } from 'lucide-react';
import { EditSuggestion } from '../../types';
import ReactMarkdown from 'react-markdown';
import toast from 'react-hot-toast';

interface ArticleEditorProps {
  content: string;
  onChange: (content: string) => void;
  onEditInstruction: (instruction: string, selectedText?: string) => void;
  onGenerateImages: () => void;
  onGenerateCover: () => void;
  onExport: () => void;
  isProcessing: boolean;
}

const ArticleEditor: React.FC<ArticleEditorProps> = ({
  content,
  onChange,
  onEditInstruction,
  onGenerateImages,
  onGenerateCover,
  onExport,
  isProcessing
}) => {
  const [selectedText, setSelectedText] = useState('');
  const [selectionPosition, setSelectionPosition] = useState<{ x: number; y: number } | null>(null);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [showChat, setShowChat] = useState(false);
  const [chatMessage, setChatMessage] = useState('');
  const [chatHistory, setChatHistory] = useState<Array<{ type: 'user' | 'system'; message: string }>>([]);
  const [viewMode, setViewMode] = useState<'edit' | 'split'>('edit');
  
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const chatInputRef = useRef<HTMLInputElement>(null);

  const editSuggestions: EditSuggestion[] = [
    { type: 'polish', label: 'Ê∂¶Ëâ≤', icon: '‚ú®', description: '‰ºòÂåñËØ≠Ë®ÄË°®ËææÔºåËÆ©ÊñáÂ≠óÊõ¥‰ºòÁæé' },
    { type: 'expand', label: 'Êâ©ÂÜô', icon: 'üìù', description: 'Â¢ûÂä†ÂÜÖÂÆπÁªÜËäÇÔºå‰∏∞ÂØåË°®Ëææ' },
    { type: 'shorten', label: 'Áº©ÂÜô', icon: '‚úÇÔ∏è', description: 'Á≤æÁÆÄÂÜÖÂÆπÔºåÁ™ÅÂá∫ÈáçÁÇπ' },
    { type: 'tone', label: 'ÊîπËØ≠Ê∞î', icon: 'üé≠', description: 'Ë∞ÉÊï¥ÊñáÁ´†ËØ≠Ê∞îÂíåÈ£éÊ†º' },
    { type: 'professional', label: '‰∏ì‰∏öÂåñ', icon: 'üíº', description: 'ËÆ©Ë°®ËææÊõ¥‰∏ì‰∏öÊ≠£Âºè' },
    { type: 'casual', label: 'Âè£ËØ≠Âåñ', icon: 'üí¨', description: 'ËÆ©Ë°®ËææÊõ¥ËΩªÊùæËá™ÁÑ∂' },
  ];

  // Â§ÑÁêÜÊñáÊú¨ÈÄâÊã©
  const handleTextSelection = useCallback(() => {
    const textarea = textareaRef.current;
    if (!textarea) return;

    // Âª∂ËøüÊâßË°åÔºåÁ°Æ‰øùÈÄâÊã©Áä∂ÊÄÅÂ∑≤Êõ¥Êñ∞
    setTimeout(() => {
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      
      if (start !== end && end - start > 1) {
        const selected = content.substring(start, end).trim();
        if (selected.length > 0) {
          setSelectedText(selected);
          
          // ËÆ°ÁÆóÂ∑•ÂÖ∑Ê†è‰ΩçÁΩÆ - Áõ∏ÂØπ‰∫éËßÜÂè£
          const rect = textarea.getBoundingClientRect();
          
          // ÁÆÄÂåñ‰ΩçÁΩÆËÆ°ÁÆó
          const x = Math.min(rect.right - 300, Math.max(rect.left, rect.left + 20));
          const y = rect.top - 60; // Â∑•ÂÖ∑Ê†èÊòæÁ§∫Âú®ÈÄâ‰∏≠ÊñáÊú¨‰∏äÊñπ
          
          setSelectionPosition({ x, y });
          setShowSuggestions(true);
        }
      } else {
        setShowSuggestions(false);
        setSelectedText('');
        setSelectionPosition(null);
      }
    }, 10);
  }, [content]);

  // Â§ÑÁêÜÁºñËæëÂª∫ËÆÆ
  const handleSuggestion = useCallback(async (suggestion: EditSuggestion) => {
    if (!selectedText) return;
    
    let instruction = '';
    switch (suggestion.type) {
      case 'polish':
        instruction = `ËØ∑Ê∂¶Ëâ≤‰ª•‰∏ãÊñáÂ≠óÔºåËÆ©ÂÆÉÊõ¥Âä†ÁîüÂä®ÂíåÂê∏Âºï‰∫∫Ôºö"${selectedText}"`;
        break;
      case 'expand':
        instruction = `ËØ∑Êâ©Â±ï‰ª•‰∏ãÂÜÖÂÆπÔºåÂ¢ûÂä†Êõ¥Â§öÁªÜËäÇÂíåËÆ∫ËØÅÔºö"${selectedText}"`;
        break;
      case 'shorten':
        instruction = `ËØ∑Á≤æÁÆÄ‰ª•‰∏ãÊñáÂ≠óÔºå‰øùÁïôÊ†∏ÂøÉËßÇÁÇπÔºö"${selectedText}"`;
        break;
      case 'tone':
        instruction = `ËØ∑Ë∞ÉÊï¥‰ª•‰∏ãÊñáÂ≠óÁöÑËØ≠Ê∞îÔºåËÆ©ÂÆÉÊõ¥ÈÄÇÂêàÁõÆÊ†áËØªËÄÖÔºö"${selectedText}"`;
        break;
      case 'professional':
        instruction = `ËØ∑Â∞Ü‰ª•‰∏ãÊñáÂ≠óÊîπÂÜôÂæóÊõ¥‰∏ì‰∏öÊ≠£ÂºèÔºö"${selectedText}"`;
        break;
      case 'casual':
        instruction = `ËØ∑Â∞Ü‰ª•‰∏ãÊñáÂ≠óÊîπÂÜôÂæóÊõ¥ËΩªÊùæÂè£ËØ≠ÂåñÔºö"${selectedText}"`;
        break;
      default:
        instruction = `ËØ∑‰ºòÂåñ‰ª•‰∏ãÊñáÂ≠óÔºö"${selectedText}"`;
    }
    
    await onEditInstruction(instruction, selectedText);
    
    // ÈöêËóèÂª∫ËÆÆÊ†è
    setShowSuggestions(false);
    setSelectedText('');
    setSelectionPosition(null);
    
    toast.success(`Ê≠£Âú®${suggestion.label}ÈÄâ‰∏≠ÊñáÊú¨...`);
  }, [selectedText, onEditInstruction]);

  // Â§ÑÁêÜÂØπËØùÊåá‰ª§
  const handleChatSubmit = async () => {
    if (!chatMessage.trim()) return;

    setChatHistory(prev => [...prev, { type: 'user', message: chatMessage }]);
    
    try {
      await onEditInstruction(chatMessage);
      setChatHistory(prev => [...prev, { type: 'system', message: 'Â∑≤Ê†πÊçÆÊÇ®ÁöÑÊåá‰ª§ËøõË°å‰øÆÊîπ' }]);
    } catch (error) {
      setChatHistory(prev => [...prev, { type: 'system', message: '‰øÆÊîπÂ§±Ë¥•ÔºåËØ∑ÈáçËØï' }]);
    }
    
    setChatMessage('');
  };

  // ÂÖ≥Èó≠Âª∫ËÆÆÊ°Ü
  const closeSuggestions = () => {
    setShowSuggestions(false);
    setSelectedText('');
    setSelectionPosition(null);
  };

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (showSuggestions && selectionPosition) {
        closeSuggestions();
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [showSuggestions, selectionPosition]);

  // ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑Ê†∑ÂºèÁöÑÈ¢ÑËßàCSS
  const wechatPreviewStyles = `
    .wechat-preview {
      max-width: 677px;
      margin: 0 auto;
      background: #fff;
      font-family: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei UI", "Microsoft YaHei", Arial, sans-serif;
      font-size: 17px;
      line-height: 1.6;
      color: #3e3e3e;
      word-wrap: break-word;
      padding: 20px;
    }
    .wechat-preview h1 {
      font-size: 24px;
      font-weight: bold;
      color: #2c2c2c;
      margin: 20px 0 15px 0;
      line-height: 1.4;
    }
    .wechat-preview h2 {
      font-size: 20px;
      font-weight: bold;
      color: #2c2c2c;
      margin: 18px 0 12px 0;
      line-height: 1.4;
    }
    .wechat-preview h3 {
      font-size: 18px;
      font-weight: bold;
      color: #2c2c2c;
      margin: 16px 0 10px 0;
      line-height: 1.4;
    }
    .wechat-preview p {
      margin: 10px 0;
      line-height: 1.8;
    }
    .wechat-preview strong {
      font-weight: bold;
      color: #2c2c2c;
    }
    .wechat-preview em {
      font-style: italic;
    }
    .wechat-preview blockquote {
      border-left: 4px solid #d0d7de;
      padding-left: 16px;
      margin: 16px 0;
      color: #656d76;
    }
    .wechat-preview ul, .wechat-preview ol {
      padding-left: 20px;
      margin: 10px 0;
    }
    .wechat-preview li {
      margin: 5px 0;
      line-height: 1.8;
    }
    .wechat-preview code {
      background: #f6f8fa;
      padding: 2px 4px;
      border-radius: 3px;
      font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, monospace;
      font-size: 14px;
    }
    .wechat-preview pre {
      background: #f6f8fa;
      padding: 16px;
      border-radius: 6px;
      overflow-x: auto;
      margin: 16px 0;
    }
    .wechat-preview img {
      max-width: 100%;
      height: auto;
      margin: 16px 0;
      border-radius: 4px;
    }
  `;

  return (
    <div className="flex-1 bg-white rounded-lg shadow-lg overflow-hidden relative">
      {/* Ê∑ªÂä†ÂæÆ‰ø°È¢ÑËßàÊ†∑Âºè */}
      <style>{wechatPreviewStyles}</style>
      
      {/* È°∂ÈÉ®Â∑•ÂÖ∑Ê†è */}
      <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <div className="flex bg-white rounded-lg border border-gray-300">
              <button
                onClick={() => setViewMode('edit')}
                className={`px-4 py-2 text-sm rounded-l-lg transition-colors flex items-center gap-2 ${
                  viewMode === 'edit' 
                    ? 'bg-blue-600 text-white' 
                    : 'text-gray-600 hover:bg-gray-100'
                }`}
              >
                <Edit3 className="w-4 h-4" />
                ÁºñËæë
              </button>
              <button
                onClick={() => setViewMode('split')}
                className={`px-4 py-2 text-sm rounded-r-lg transition-colors flex items-center gap-2 ${
                  viewMode === 'split' 
                    ? 'bg-blue-600 text-white' 
                    : 'text-gray-600 hover:bg-gray-100'
                }`}
              >
                <Eye className="w-4 h-4" />
                ÂàÜÂ±èÈ¢ÑËßà
              </button>
            </div>
          </div>

          <div className="flex items-center gap-2">
            <button
              onClick={() => setShowChat(!showChat)}
              className={`p-2 rounded-lg transition-colors ${
                showChat 
                  ? 'bg-blue-600 text-white' 
                  : 'text-gray-600 hover:bg-gray-100'
              }`}
              title="ÂØπËØùÂºèÁºñËæë"
            >
              <MessageCircle className="w-4 h-4" />
            </button>
            <button
              onClick={onGenerateImages}
              disabled={isProcessing}
              className="p-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors disabled:opacity-50"
              title="Êô∫ËÉΩÈÖçÂõæ"
            >
              <Image className="w-4 h-4" />
            </button>
            <button
              onClick={onGenerateCover}
              disabled={isProcessing}
              className="p-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors disabled:opacity-50"
              title="ÁîüÊàêÂ∞ÅÈù¢"
            >
              <Wand2 className="w-4 h-4" />
            </button>
            <button
              onClick={onExport}
              className="p-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors"
              title="‰∏ÄÈîÆÂ§çÂà∂"
            >
              <Copy className="w-4 h-4" />
            </button>
          </div>
        </div>
      </div>

      <div className="flex h-full">
        {/* ‰∏ªÁºñËæëÂå∫Âüü */}
        <div className={`${viewMode === 'split' ? 'w-1/2' : 'flex-1'} relative`}>
          <textarea
            ref={textareaRef}
            value={content}
            onChange={(e) => onChange(e.target.value)}
            onSelect={handleTextSelection}
            className="w-full h-full p-6 text-gray-800 resize-none focus:outline-none text-base leading-relaxed border-r border-gray-200"
            placeholder="ÂºÄÂßã‰π¶ÂÜôÊÇ®ÁöÑÊñáÁ´†ÂÜÖÂÆπ..."
            style={{ minHeight: '600px' }}
          />

          {/* ÂàíËØçÂª∫ËÆÆÂ∑•ÂÖ∑Ê†è */}
          {showSuggestions && selectionPosition && (
            <div
              className="fixed bg-white border border-gray-200 rounded-xl shadow-xl p-3 z-50 backdrop-blur-sm"
              style={{
                left: selectionPosition.x,
                top: selectionPosition.y,
                maxWidth: '320px'
              }}
            >
              <div className="mb-2">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-xs font-medium text-gray-500">
                    Â∑≤ÈÄâÊã© {selectedText.length} ‰∏™Â≠óÁ¨¶
                  </span>
                  <button
                    onClick={() => {
                      setShowSuggestions(false);
                      setSelectedText('');
                      setSelectionPosition(null);
                    }}
                    className="p-1 text-gray-400 hover:text-gray-600 rounded-full hover:bg-gray-100"
                  >
                    <X className="w-3 h-3" />
                  </button>
                </div>
                <div className="text-xs text-gray-400 truncate bg-gray-50 px-2 py-1 rounded">
                  "{selectedText.substring(0, 50)}{selectedText.length > 50 ? '...' : ''}"
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-2">
                {editSuggestions.map((suggestion) => (
                  <button
                    key={suggestion.type}
                    onClick={() => handleSuggestion(suggestion)}
                    className="group p-2 bg-gray-50 hover:bg-blue-50 hover:border-blue-200 border border-gray-200 rounded-lg text-sm transition-all duration-200 text-left"
                    title={suggestion.description}
                  >
                    <div className="flex items-center gap-2 mb-1">
                      <span className="text-base group-hover:scale-110 transition-transform">
                        {suggestion.icon}
                      </span>
                      <span className="font-medium text-gray-700 group-hover:text-blue-600">
                        {suggestion.label}
                      </span>
                    </div>
                    {suggestion.description && (
                      <div className="text-xs text-gray-500 group-hover:text-blue-500">
                        {suggestion.description}
                      </div>
                    )}
                  </button>
                ))}
              </div>
              
              <div className="mt-3 pt-2 border-t border-gray-100">
                <button
                  onClick={() => {
                    setShowChat(true);
                    setShowSuggestions(false);
                  }}
                  className="w-full p-2 bg-gradient-to-r from-purple-50 to-blue-50 hover:from-purple-100 hover:to-blue-100 border border-purple-200 rounded-lg text-sm text-purple-700 transition-all duration-200 flex items-center justify-center gap-2"
                >
                  <MessageCircle className="w-4 h-4" />
                  Ëá™ÂÆö‰πâÊåá‰ª§
                </button>
              </div>
            </div>
          )}
        </div>

        {/* ÂàÜÂ±èÈ¢ÑËßàÂå∫Âüü */}
        {viewMode === 'split' && (
          <div className="w-1/2 bg-gray-50 overflow-y-auto">
            <div className="p-6">
              <div className="bg-white rounded-lg shadow-sm min-h-full border border-gray-200">
                <div className="wechat-preview">
                  <ReactMarkdown 
                    components={{
                      h1: ({children}) => <h1 className="text-2xl font-bold text-gray-900 mb-4 leading-tight">{children}</h1>,
                      h2: ({children}) => <h2 className="text-xl font-bold text-gray-800 mb-3 mt-6 leading-tight">{children}</h2>,
                      h3: ({children}) => <h3 className="text-lg font-bold text-gray-800 mb-2 mt-5 leading-tight">{children}</h3>,
                      p: ({children}) => <p className="text-gray-700 mb-4 leading-relaxed">{children}</p>,
                      strong: ({children}) => <strong className="font-bold text-gray-900">{children}</strong>,
                      em: ({children}) => <em className="italic text-gray-700">{children}</em>,
                      ul: ({children}) => <ul className="list-disc list-inside mb-4 text-gray-700 space-y-1">{children}</ul>,
                      ol: ({children}) => <ol className="list-decimal list-inside mb-4 text-gray-700 space-y-1">{children}</ol>,
                      blockquote: ({children}) => (
                        <blockquote className="border-l-4 border-blue-500 pl-4 py-2 mb-4 bg-blue-50 text-gray-700 italic">
                          {children}
                        </blockquote>
                      ),
                      code: ({children}) => (
                        <code className="bg-gray-100 text-red-600 px-2 py-1 rounded text-sm font-mono">
                          {children}
                        </code>
                      ),
                      pre: ({children}) => (
                        <pre className="bg-gray-100 p-4 rounded-lg mb-4 overflow-x-auto text-sm">
                          {children}
                        </pre>
                      )
                    }}
                  >
                    {content || '# ÊñáÁ´†Ê†áÈ¢ò\n\nÂºÄÂßãÁºñËæëÊÇ®ÁöÑÊñáÁ´†ÂÜÖÂÆπÔºåÂè≥‰æßÂ∞ÜÂÆûÊó∂ÊòæÁ§∫ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑Ê†∑ÂºèÁöÑÈ¢ÑËßàÊïàÊûú„ÄÇ\n\n## ‰∫åÁ∫ßÊ†áÈ¢ò\n\nËøôÈáåÊòØÊ≠£ÊñáÂÜÖÂÆπÔºåÊîØÊåÅ**Á≤ó‰Ωì**„ÄÅ*Êñú‰Ωì*Á≠âÊ†ºÂºè„ÄÇ\n\n> ËøôÊòØ‰∏Ä‰∏™ÂºïÁî®Âùó\n\n- ÂàóË°®È°π1\n- ÂàóË°®È°π2\n- ÂàóË°®È°π3'}
                  </ReactMarkdown>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* ÂØπËØùÁºñËæëÈù¢Êùø */}
        {showChat && (
          <div className="w-80 bg-gray-50 border-l border-gray-200 flex flex-col">
            <div className="p-4 border-b border-gray-200">
              <h4 className="font-medium text-gray-800">ÂØπËØùÂºèÁºñËæë</h4>
              <p className="text-sm text-gray-600 mt-1">Áî®Ëá™ÁÑ∂ËØ≠Ë®ÄÊèèËø∞ÊÇ®ÊÉ≥Ë¶ÅÁöÑ‰øÆÊîπ</p>
            </div>
            
            <div className="flex-1 p-4 overflow-y-auto">
              <div className="space-y-3">
                {chatHistory.map((msg, index) => (
                  <div
                    key={index}
                    className={`p-3 rounded-lg ${
                      msg.type === 'user'
                        ? 'bg-blue-600 text-white ml-4'
                        : 'bg-gray-200 text-gray-800 mr-4'
                    }`}
                  >
                    <p className="text-sm">{msg.message}</p>
                  </div>
                ))}
              </div>
            </div>
            
            <div className="p-4 border-t border-gray-200">
              <div className="flex gap-2">
                <input
                  ref={chatInputRef}
                  type="text"
                  value={chatMessage}
                  onChange={(e) => setChatMessage(e.target.value)}
                  onKeyDown={(e) => e.key === 'Enter' && handleChatSubmit()}
                  placeholder="‰æãÔºöÊääÂºïË®ÄÊîπÂæóÊõ¥ÁÆÄÊ¥Å..."
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-blue-500"
                />
                <button
                  onClick={handleChatSubmit}
                  disabled={!chatMessage.trim() || isProcessing}
                  className="px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white rounded-lg transition-colors"
                >
                  ÂèëÈÄÅ
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ArticleEditor;